import os
import csv
import matplotlib.pyplot as plt
import matplotlib.cbook as cbook
import numpy as np
import pandas as pd

rows = []
studied = []
infected = []
normal = []
undefined = []
all = []

#outfile = open("filename.txt", "w")

# accessing filename
filename = "MARE-CW-2019-Logs-v3.5.csv"

# reading csv file
with open(filename, 'r') as csvfile:
# creating a csv reader object
    csvreader = csv.reader(csvfile)

# extracting field names through first row
    fields = csvreader.__next__()

    # extracting each data row one by one
    for row in csvreader:
        rows.append(row)

    # get total number of rows
    print("Total no. of rows: %d"%(csvreader.line_num))


# printing the field names
print('Field names are:' + ', '.join(field for field in fields))

# Get only normal and infected
for row in rows:
    if row[3] != "":
        studied.append(row)

    #outfile.write("\n".join(str(item) for item in all))

# get total number of studied entries
print("Total number of studied entries is " + str(len((studied))))

# Extract data types
def getInfected():

    for row in studied:
        if row[3] == "Infected":
            infected.append(row)

    for col in infected:
        print(col)
    #outfile.write("\n".join(str(item) for item in all))
    print('\n')

def getNormal():

    for row in studied:
        if row[3] == "Normal":
            normal.append(row)

    for col in normal:
        print(col)
    #outfile.write("\n".join(str(item) for item in all))
    print('\n')

def getUndefined():

    for row in rows:
        if row[3] == "":
            undefined.append(row)

    for col in undefined:
        print(col)

    #outfile.write("\n".join(str(item) for item in all))
    print('\n')

"""
def getAll():

    for row in rows:
        all.append(row)

    for col in all:
        print(col)

    outfile.write("\n".join(str(item) for item in all))
    print('\n')
"""
# getFunction calls

#getInfected()
#getNormal()
#getUndefined()
#getAll()

# closing CSV

csvfile.close()

# Create scatter plot

df1 = pd.read_csv("infected_selection.csv", delimiter=',', nrows=248)
df2 = pd.read_csv("normal_selection.csv", delimiter=',', nrows=248)
df3 = pd.read_csv("undefined_selection.csv", delimiter = ',', nrows=248)
df4 = pd.read_csv("all.csv", delimiter = ',', nrows=248)
df5 = pd.read_csv("undefined_selection_prediction_normal.csv", delimiter = ',', nrows=248)
df6 = pd.read_csv("undefined_selection_prediction_infected.csv", delimiter = ',', nrows=248)
df7 = pd.read_csv("solved_normal.csv", delimiter = ',', nrows=248)
df8 = pd.read_csv("excel_unknown_predictions_normal.csv", delimiter = ',', nrows=248)
df9 = pd.read_csv("excel_unknown_predictions_infected.csv", delimiter = ',', nrows=248)
df10 = pd.read_csv("undefined_selection_prediction_normal_percentage.csv", delimiter = ',', nrows=248)
df11 = pd.read_csv("undefined_selection_prediction_infected_percentage.csv", delimiter = ',', nrows=248)

y1 = df1["Memory"];
x1 = df1["Processor"]
y2 = df2["Memory"];
x2 = df2["Processor"]
y3 = df3["Memory"]
x3 = df3["Processor"]
y4 = df4["Memory"]
x4 = df4["Processor"]
y5 = df5["Memory"]
x5 = df5["Processor"]
y6 = df6["Memory"]
x6 = df6["Processor"]
y7 = df7["Memory"]
x7 = df7["Processor"]
x8 = df8["Memory"]
y8 = df8["Processor"]
x9 = df9["Memory"]
y9 = df9["Processor"]
x10 = df10["Memory"]
y10 = df10["Processor"]
x11 = df11["Memory"]
y11 = df11["Processor"]

# Uncomment the below code as required to produce different plots on the graph

plt.xlabel("Processor"); plt.ylabel('Memory')
plt.title("Infected vs Non-Infected Resource Usage")
plt.scatter(x1,y1, label ='Known-Infected', color = 'purple', marker='X')
plt.scatter(x2,y2, label = 'Known-Normal', color = 'blue', marker = 'o')
#plt.scatter(x3,y3, label = 'Unknown', color = 'blue', marker = 's')
#plt.scatter(x5,y5, label = 'Logistic Reg Normal', color = 'green', marker = 'x')
#plt.scatter(x6,y6, label = 'Losgistic Reg Infected', color = 'red', marker = 'P')
#plt.scatter(x7,y7, label = 'Logistic Probability Infected < 50%', color = 'green', marker = 's')
plt.scatter(x8,y8, label = 'Excel Predict Normal', color = 'green', marker = 'x')
plt.scatter(x9,y9, label = 'Excel Predict Infected', color = 'red', marker = 'P')
#plt.scatter(x10,y10, label = 'Logistic Probability Infected <50%', color = 'green', marker = 'x')
#plt.scatter(x11,y11, label = 'Logistic Probability Infected >50%', color = 'red', marker = 'P')

plt.legend()
plt.show()

"""

# trendline infected
z = np.polyfit(x1, y1, 1)
p = np.poly1d(z)
plt.plot(x1,p(x1),"red")

# trendline normal_selection

z = np.polyfit(x2, y2, 1)
p = np.poly1d(z)
plt.plot(x2,p(x2),"green")


# trendline unknown

z = np.polyfit(x3, y3, 1)
p = np.poly1d(z)
plt.plot(x3,p(x3),"blue")

# all data trendline

z = np.polyfit(x4, y4, 1)
p = np.poly1d(z)
plt.plot(x4,p(x4),"orange")

plt.show()

"""
